{
    "features": [
        {
            "name": "cusp",
            "isBuiltIn": false,
            "version": "0.95",
            "description": "Standard Extension for Packed-SIMD Instructions",
            "instructions": [
                {
                    "name": "Smdrs",
                    "functionUnit": "Simd",
                    "asm": "Smdrs $rd,$rs1,$rs2",
                    "length": 32,
                    "architecture": "RV32&RV64",
                    "encoding": [
                        {
                            "base": 0,
                            "width": 7,
                            "type": "opcode",
                            "value": "1110111"
                        },
                        {
                            "base": 7,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "out",
                            "value": "rd"
                        },
                        {
                            "base": 12,
                            "width": 3,
                            "type": "function",
                            "value": "001"
                        },
                        {
                            "base": 15,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "in",
                            "value": "rs1"
                        },
                        {
                            "base": 20,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "in",
                            "value": "rs2"
                        },
                        {
                            "base": 25,
                            "width": 7,
                            "type": "function",
                            "value": "0110100"
                        }
                    ],
                    "behavior": {
                        "cCode": [
                            "  for (uint32_t i = 0; i < XLen / 32; ++i) {",
                            "    int64_t Tmp = (int16_t)getHalf(rs1, 2 * i) * (int16_t)getHalf(rs2, 2 * i) -",
                            "                  (int16_t)getHalf(rs1, 1 + 2 * i) * (int16_t)getHalf(rs2, 1 + 2 * i);",
                            "    setWord(rd, i, Tmp);",
                            "  }"
                        ]
                    },
                    "genTmpl": "PextInst"
                },
                {
                    "name": "Kmxda",
                    "functionUnit": "Simd",
                    "asm": "Kmxda $rd,$rs1,$rs2",
                    "length": 32,
                    "architecture": "RV32&RV64",
                    "encoding": [
                        {
                            "base": 0,
                            "width": 7,
                            "type": "opcode",
                            "value": "1110111"
                        },
                        {
                            "base": 7,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "out",
                            "value": "rd"
                        },
                        {
                            "base": 12,
                            "width": 3,
                            "type": "function",
                            "value": "001"
                        },
                        {
                            "base": 15,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "in",
                            "value": "rs1"
                        },
                        {
                            "base": 20,
                            "width": 5,
                            "type": "reg",
                            "subtype": "GPR",
                            "direction": "in",
                            "value": "rs2"
                        },
                        {
                            "base": 25,
                            "width": 7,
                            "type": "function",
                            "value": "0011101"
                        }
                    ],
                    "behavior": {
                        "cCode": [
                            "  for (uint32_t i = 0; i < XLen / 32; ++i) {",
                            "    int16_t r1 = getHalf(rs1, 2 * i);",
                            "    int16_t r2 = getHalf(rs2, 2 * i);",
                            "    int32_t tmp = 0x80008000;",
                            "    if (getWord(rs1, i) != tmp || getWord(rs2, i) != tmp) {",
                            "      int32_t res = sext<16>(getHalf(rs1, 1 + 2 * i)) * sext<16>(r2) +",
                            "                    sext<16>(r1) * sext<16>(getHalf(rs2, 1 + 2 * i));",
                            "      setWord(rd, i, res);",
                            "    } else {",
                            "      setWord(rd, i, 0x7fffffff);",
                            "      setVxsat(DI);",
                            "    }",
                            "  }"
                        ]
                    },
                    "genTmpl": "PextInst"
                }
            ]
        }
    ]
}